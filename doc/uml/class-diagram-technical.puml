@startuml

skinparam package {
  BackgroundColor #efefef
  BorderColor #a0a0a0
  BackgroundColor<<Main>> gold
  BorderColor black
  ArrowColor black
  FontName Arial Unicode MS
  FontSize 20
}

skinparam class {
  BackgroundColor #white
  BorderColor #f4f4f4
  BackgroundColor<<Main>> gold
  BorderColor black
  ArrowColor black
  FontName Arial Unicode MS
  FontSize 20
}
skinparam classFontSize 24
skinparam classAttributeIconSize 0
skinparam defaultFontSize 20

skinparam ArrowColor black
skinparam ArrowThickness 2

hide circle

package java.util {
    class Observable {
        - changed: boolean
        - observers: Vector<Observer>
        +registerObserver(o: Observer)
        +unregisterObserver(o: Observer)
        #notifyObservers()
    }

    interface Observer <<interface>> {
        +update() {abstract}
    }
}

note "Package" as Package
note "Subpackage" as Subpackage
note "Klasse" as Class
note "Interface" as Interface
note "Vererbung" as Vererbung
note "Implementierung" as Implementierung
note "gerichtete Assoziation" as Assoziation
note "generischen Typ binden" as Generics
note "gerichtete Abhängigkeit:\n<<use>> benutzt\n<<create>> erzeugt\n<<call>> Aufruf" as Dependency

class ConcreteObservable {
    -concreteState: State
    +getState(): State
    +setState(s: State)
}

Observable <|-- ConcreteObservable

hide interface fields

abstract class AbstractObserver < T extends Observer >  {
    +update()
    #handleUpdate(o: Observer) {abstract}
}

class ConcreteObserver {
    #handleUpdate(o: Observer)
}

class StringUtils {
    +isEmpty(value: String) {static}
}

note right of ConcreteObservable::concreteState
  Objektvariable
  vom Typ <i>State</i>
end note

note right of ConcreteObservable::getState
  Methode mit
  Rückgabetyp <i>State</i>
end note

note right of ConcreteObservable::setState
  Methode mit
  Parametertyp <i>State</i>
end note


Observable o- Observer : \t\t

Observer <|.. AbstractObserver
AbstractObserver <|-- ConcreteObserver : <<bind>> \n<T -> ConcreteObserver>
ConcreteObservable <-left- ConcreteObserver : \t\t

java .right. Package
util .down. Subpackage
Observable .up. Class
Observable .. Vererbung
ConcreteObservable .up. Vererbung
Observer .up. Interface

Observer .down. Implementierung
AbstractObserver .up. Implementierung

ConcreteObserver .down. Assoziation
ConcreteObservable .down. Assoziation
ConcreteObservable .down.> StringUtils : <<use>>

ConcreteObserver .up. Generics
AbstractObserver .down. Generics

ConcreteObservable .down. Dependency
StringUtils .up. Dependency

note right of StringUtils::isEmpty
  statische Methode
end note

note as floating
  <u><b>Sichtbarkeiten</b></u>

    + public
    # protected
    ~ package private
    - private
end note

@enduml
