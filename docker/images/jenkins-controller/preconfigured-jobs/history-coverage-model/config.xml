<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1505.vea_4b_20a_4a_495">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4018.vf02e01888da_f">
    <script>node (&apos;jdk21&apos;) {
    def url = &quot;https://github.com/jenkinsci/coverage-model.git&quot;
    def tags = &quot;git ls-remote -t --sort v:refname --refs $url | cut -f1 | tail -n +28&quot;
    env.COUNT = sh(script: tags + &quot; | wc -l&quot;, returnStdout: true).trim()

        stage(&apos;Checkout&apos;) {
            echo &quot;Build: ${BUILD_NUMBER}&quot;
            env.HASH = sh(script: tags + &quot; | head -n ${BUILD_NUMBER} | tail -1&quot;, returnStdout: true).trim()
            echo &quot;Hash: ${HASH}&quot;
            checkout([$class           : &apos;GitSCM&apos;,
                      branches         : [[name: &quot;${HASH}&quot;]],
                      userRemoteConfigs: [[url: &quot;$url&quot;]]])
        }

        stage (&apos;Git mining&apos;) {
                discoverGitReferenceBuild()
                mineRepository()
                gitDiffStat()
        }

        stage (&apos;Build, Test, and Static Analysis&apos;) {
            withMaven(maven: &apos;mvn-default&apos;, mavenOpts: &apos;-Xmx1024m -Xms512m&apos;) {
                sh &quot;mvn -V -U --fail-never -e clean verify -Denforcer.skip -Dmaven.test.failure.ignore&quot;
            }

            recordIssues tools: [java(), javaDoc()], aggregatingResults: &apos;true&apos;, id: &apos;java&apos;, name: &apos;Java&apos;
            recordIssues tool: errorProne()

            junit(allowEmptyResults: true, testResults: &apos;**/target/*-reports/TEST-*.xml&apos;)

            recordCoverage(tools: [[parser: &apos;METRICS&apos;, pattern: &apos;target/metrics/pmd.xml&apos;]],
                sourceCodeRetention: &apos;NEVER&apos;, id: &apos;metrics&apos;, name: &apos;Software Metrics&apos;)
            recordCoverage(tools: [
                        [parser: &apos;JACOCO&apos;, pattern: &apos;target/site/jacoco/jacoco.xml&apos;],
                        [parser: &apos;JUNIT&apos;, pattern: &apos;**/target/*-reports/TEST-*.xml&apos;]],
                sourceCodeRetention: &apos;EVERY_BUILD&apos;,
                qualityGates: [
                    [threshold: 60.0, metric: &apos;LINE&apos;, baseline: &apos;PROJECT&apos;, criticality: &apos;NOTE&apos;],
                    [threshold: 60.0, metric: &apos;BRANCH&apos;, baseline: &apos;PROJECT&apos;, criticality: &apos;NOTE&apos;],
                    [threshold: 50.0, metric: &apos;LINE&apos;, baseline: &apos;PROJECT&apos;, criticality: &apos;ERROR&apos;],
                    [threshold: 50.0, metric: &apos;BRANCH&apos;, baseline: &apos;PROJECT&apos;, criticality: &apos;ERROR&apos;]])
            recordIssues tools: [checkStyle(pattern: &apos;target/**/checkstyle-result.xml&apos;),
                spotBugs(pattern: &apos;target/spotbugsXml.xml&apos;),
                pmdParser(pattern: &apos;target/pmd-*/pmd.xml&apos;),
                cpd(pattern: &apos;target/cpd.xml&apos;),
                revApi(pattern: &apos;target/revapi-result.json&apos;),
                taskScanner(highTags:&apos;FIXME&apos;, normalTags:&apos;TODO&apos;, includePattern: &apos;**/*.java&apos;, excludePattern: &apos;target/**/*&apos;)],
                sourceCodeRetention: &apos;EVERY_BUILD&apos;,
                qualityGates: [
                    [threshold: 10, type: &apos;TOTAL&apos;, criticality: &apos;NOTE&apos;],
                    [threshold: 100, type: &apos;TOTAL&apos;, criticality: &apos;ERROR&apos;]]
        }

        stage (&apos;Mutation Coverage&apos;) {
            withMaven(mavenOpts: &apos;-Xmx1024m -Xms512m&apos;) {
                sh &quot;mvn dependency:properties org.pitest:pitest-maven:mutationCoverage&quot;
            }
            recordCoverage tools: [[parser: &apos;PIT&apos;, pattern: &apos;**/pit-reports/mutations.xml&apos;],
                    [parser: &apos;JUNIT&apos;, pattern: &apos;**/target/*-reports/TEST-*.xml&apos;]], id: &apos;pit&apos;,
                  name: &apos;Mutation Coverage&apos;, sourceCodeRetention: &apos;EVERY_BUILD&apos;

        }

        stage (&apos;Autograding&apos;) {
            autoGrade(&apos;&apos;&apos;
                    {
                      &quot;tests&quot;: {
                        &quot;tools&quot;: [
                          {
                            &quot;name&quot;: &quot;Tests&quot;
                          }
                        ],
                        &quot;name&quot;: &quot;JUnit&quot;,
                        &quot;passedImpact&quot;: 0,
                        &quot;skippedImpact&quot;: -1,
                        &quot;failureImpact&quot;: -5,
                        &quot;maxScore&quot;: 100
                      },
                      &quot;analysis&quot;: [
                        {
                          &quot;name&quot;: &quot;Style&quot;,
                          &quot;id&quot;: &quot;style&quot;,
                          &quot;tools&quot;: [
                            {
                              &quot;id&quot;: &quot;checkstyle&quot;,
                              &quot;name&quot;: &quot;CheckStyle&quot;
                            },
                            {
                              &quot;id&quot;: &quot;pmd&quot;,
                              &quot;name&quot;: &quot;PMD&quot;
                            }
                          ],
                          &quot;errorImpact&quot;: -1,
                          &quot;highImpact&quot;: -1,
                          &quot;normalImpact&quot;: -1,
                          &quot;lowImpact&quot;: -1,
                          &quot;maxScore&quot;: 100
                        },
                        {
                          &quot;name&quot;: &quot;Bugs&quot;,
                          &quot;id&quot;: &quot;bugs&quot;,
                          &quot;icon&quot;: &quot;bug&quot;,
                          &quot;tools&quot;: [
                            {
                              &quot;id&quot;: &quot;spotbugs&quot;,
                              &quot;name&quot;: &quot;SpotBugs&quot;
                            }
                          ],
                          &quot;errorImpact&quot;: -3,
                          &quot;highImpact&quot;: -3,
                          &quot;normalImpact&quot;: -3,
                          &quot;lowImpact&quot;: -3,
                          &quot;maxScore&quot;: 100
                        }
                      ],
                      &quot;coverage&quot;: [
                        {
                          &quot;tools&quot;: [
                            {
                              &quot;id&quot;: &quot;coverage&quot;,
                              &quot;name&quot;: &quot;Line Coverage&quot;,
                              &quot;metric&quot;: &quot;line&quot;
                            },
                            {
                              &quot;id&quot;: &quot;coverage&quot;,
                              &quot;name&quot;: &quot;Branch Coverage&quot;,
                              &quot;metric&quot;: &quot;branch&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;Code Coverage&quot;,
                          &quot;maxScore&quot;: 100,
                          &quot;missedPercentageImpact&quot;: -1
                        },
                        {
                          &quot;tools&quot;: [
                            {
                              &quot;id&quot;: &quot;pit&quot;,
                              &quot;name&quot;: &quot;Mutation Coverage&quot;,
                              &quot;metric&quot;: &quot;mutation&quot;
                            }
                          ],
                          &quot;name&quot;: &quot;Mutation Coverage&quot;,
                          &quot;maxScore&quot;: 100,
                          &quot;missedPercentageImpact&quot;: -1
                        }
                      ]
                    }
                &apos;&apos;&apos;)
        }

        if (env.COUNT.toInteger() &gt; env.BUILD_NUMBER.toInteger()) {
            build(job: env.JOB_NAME, wait: false)
        }
        else {
            echo &quot;Stopping after ${COUNT} tags&quot;
        }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
